
#!/usr/bin/env python3
import numpy as np
import matplotlib.pyplot as plt


class Tof_to_pcd:

    def __init__(self):
        # Quaternions based on CAD model
        self.Q= [np.array([1., 0., 0., 0.]), np.array([0.707, 0., -0.707, 0.]), np.array([0., 0., 1., 0.]), np.array([0.707, 0., 0.707, 0.])]
        # Q= [np.array([0.707, -0.707, 0., 0.]), np.array([0.707, -0.707, 0., 0.]), np.array([0.707, -0.707, 0., 0.]), np.array([0.707, -0.707, 0., 0.])]
        self.Q2= [np.array([0.707, 0., 0.707, 0.]), np.array([0., 0., 1., 0.]), np.array([0.707, 0., -0.707, 0.]), np.array([1., 0., 0., 0.])]
        # Transform based on CAD model, in mm
        self.T= [np.array([-30.178, 83.965, 2.698]), # 0
            np.array([-1.442 , 83.965, -29.950]), # 1
            np.array([31.228, 83.965, -1.214]), #np.array([1.214, 83.965, 31.228]), # 2
            np.array([2.408, 83.965, 31.456])]#np.array([31.456, 83.965, -2.408])] # 3

        # readings = np.array([62, 59, 61, 61, 62, 59, 63, 59, 60, 61, 61, 61, 63, 62, 61, 59, 64, 63, 61, 62, 61, 67, 64, 61, 65, 64, 62, 64, 61, 65, 70, 60, 63, 64, 65, 62, 62, 63, 70, 64, 63, 64, 65, 66, 61, 63, 65, 64, 63, 65, 64, 64, 64, 64, 65, 63, 65, 63, 63, 64, 63, 64, 63, 64, 56, 53, 56, 58, 57, 57, 55, 56, 59, 56, 58, 55, 56, 59, 55, 57, 57, 55, 56, 58, 58, 57, 57, 57, 54, 58, 57, 60, 59, 57, 59, 57, 55, 56, 57, 59, 56, 54, 58, 57, 56, 58, 56, 58, 57, 55, 61, 57, 55, 57, 58, 56, 56, 59, 58, 57, 56, 57, 58, 57, 57, 58, 58, 55, 54, 52, 55, 53, 55, 54, 56, 53, 52, 54, 53, 55, 56, 54, 57, 52, 54, 53, 52, 54, 55, 54, 56, 57, 53, 54, 53, 53, 55, 52, 55, 58, 57, 55, 54, 55, 52, 51, 57, 55, 52, 52, 55, 54, 53, 54, 54, 53, 54, 55, 56, 55, 54, 53, 55, 56, 56, 56, 53, 53, 54, 56, 54, 55, 57, 57, 53, 56, 55, 53, 53, 52, 55, 57, 58, 56, 56, 58, 53, 53, 58, 55, 57, 58, 57, 58, 60, 54, 59, 56, 58, 56, 56, 58, 61, 58, 59, 58, 59, 57, 59, 57, 61, 60, 58, 61, 61, 58, 58, 58, 57, 59, 62, 60, 61, 58, 60, 58, 59, 61, 60, 60, 61, 61, 61, 59, 61, 59])
        # readings = np.array([109, 109, 111, 108, 110, 109, 221, 109, 103, 104, 104, 107, 106, 105, 104, 104, 102, 102, 102, 101, 101, 103, 100, 100, 98, 98, 99, 99, 97, 98, 98, 94, 93, 92, 94, 95, 94, 91, 94, 93, 90, 91, 91, 92, 90, 89, 89, 89, 85, 86, 87, 85, 88, 86, 86, 84, 82, 81, 81, 81, 82, 80, 80, 78, 90, 93, 97, 103, 110, 115, 344, 546, 90, 93, 99, 102, 110, 115, 120, 534, 88, 94, 100, 105, 109, 115, 120, 527, 87, 94, 100, 106, 111, 114, 120, 205, 88, 94, 100, 105, 110, 114, 120, 205, 86, 94, 97, 103, 108, 113, 120, 123, 88, 93, 98, 103, 108, 114, 119, 122, 87, 93, 97, 102, 107, 112, 118, 122, 75, 74, 74, 74, 73, 74, 74, 75, 79, 78, 77, 79, 80, 79, 81, 78, 81, 83, 82, 83, 83, 84, 85, 85, 86, 86, 88, 88, 90, 87, 88, 89, 90, 91, 90, 94, 92, 91, 94, 92, 94, 95, 96, 97, 95, 98, 96, 97, 99, 100, 99, 101, 100, 100, 101, 101, 115, 401, 115, 105, 117, 108, 119, 109, 87, 82, 78, 74, 71, 67, 62, 62, 85, 85, 83, 78, 72, 72, 64, 61, 88, 85, 81, 80, 76, 75, 68, 63, 89, 85, 83, 77, 73, 73, 72, 65, 89, 89, 85, 82, 76, 73, 72, 65, 92, 88, 82, 80, 75, 73, 70, 66, 90, 88, 85, 79, 77, 73, 72, 66, 89, 87, 84, 80, 76, 72, 72, 66])
        # readings = np.array([538, 64, 178, 1032, 63, 2354, 64, 145, 60, 61, 720, 61, 63, 58, 59, 60, 57, 58, 59, 252, 57, 59, 58, 56, 57, 59, 57, 58, 54, 55, 59, 57, 57, 57, 56, 55, 56, 54, 58, 57, 59, 58, 58, 58, 54, 54, 57, 56, 58, 60, 57, 57, 59, 57, 58, 58, 61, 60, 60, 60, 58, 60, 61, 59, 51, 53, 57, 63, 423, 543, 543, 550, 53, 55, 59, 62, 470, 536, 536, 543, 54, 54, 60, 64, 94, 553, 543, 543, 51, 55, 60, 65, 70, 166, 938, 924, 52, 55, 59, 64, 302, 230, 640, 965, 52, 56, 57, 64, 69, 69, 72, 114, 53, 55, 60, 62, 68, 69, 70, 77, 53, 55, 60, 62, 69, 295, 70, 72, 50, 50, 50, 51, 51, 50, 50, 292, 47, 49, 48, 49, 48, 48, 50, 48, 46, 49, 47, 47, 46, 46, 48, 48, 49, 48, 48, 47, 47, 45, 46, 49, 47, 47, 46, 49, 49, 46, 50, 46, 66, 49, 48, 49, 49, 50, 47, 47, 52, 50, 51, 51, 50, 49, 49, 535, 63, 56, 71, 53, 65, 53, 53, 545, 50, 51, 51, 56, 59, 63, 67, 79, 50, 52, 54, 57, 60, 63, 68, 339, 51, 52, 55, 58, 60, 65, 67, 82, 52, 53, 55, 56, 61, 65, 69, 75, 54, 55, 56, 60, 64, 65, 190, 69, 53, 56, 59, 61, 61, 66, 1093, 66, 55, 56, 60, 60, 63, 923, 928, 923, 54, 56, 59, 60, 64, 501, 540, 887])
        # readings = np.array([78, 80, 79, 79, 79, 78, 80, 81, 73, 75, 73, 73, 76, 74, 73, 73, 68, 67, 68, 68, 67, 69, 68, 68, 65, 65, 65, 66, 67, 65, 67, 65, 67, 69, 70, 71, 72, 70, 73, 73, 75, 78, 78, 80, 78, 78, 83, 86, 87, 88, 88, 90, 147, 93, 96, 100, 101, 103, 104, 104, 105, 103, 104, 96, 60, 64, 68, 73, 406, 535, 541, 551, 61, 64, 70, 72, 78, 532, 539, 541, 62, 66, 70, 76, 77, 556, 538, 543, 61, 65, 70, 75, 78, 186, 912, 924, 62, 65, 71, 76, 81, 516, 309, 958, 62, 66, 69, 73, 79, 148, 79, 171, 61, 67, 71, 73, 80, 1015, 79, 81, 62, 67, 70, 75, 79, 79, 142, 79, 70, 76, 76, 76, 74, 75, 76, 539, 68, 66, 66, 63, 63, 63, 63, 62, 57, 55, 53, 53, 54, 52, 54, 52, 53, 51, 51, 53, 52, 49, 52, 51, 56, 54, 55, 57, 55, 54, 57, 54, 61, 59, 60, 58, 57, 59, 58, 58, 65, 67, 66, 65, 65, 64, 63, 65, 644, 72, 72, 70, 71, 69, 68, 484, 64, 69, 77, 87, 101, 116, 123, 91, 63, 71, 81, 87, 100, 113, 126, 101, 65, 69, 78, 88, 97, 111, 125, 334, 65, 71, 80, 87, 97, 111, 123, 109, 64, 71, 79, 88, 97, 109, 122, 110, 65, 72, 81, 86, 97, 109, 121, 105, 66, 72, 80, 85, 96, 109, 124, 923, 63, 71, 78, 86, 96, 111, 586, 890])

        # # First sample no top higher off the table rectagular object target
        # data = [228, 231, 170, 104, 106, 104, 105, 107, 235, 234, 162, 108, 108, 108, 108, 105, 241, 233, 162, 108, 107, 110, 109, 109, 243, 235, 158, 108, 107, 110, 110, 111, 245, 238, 162, 110, 109, 109, 110, 113, 246, 241, 174, 111, 109, 112, 110, 112, 247, 242, 201, 111, 112, 112, 111, 113, 218, 224, 182, 113, 109, 109, 111, 113, 100, 101, 102, 102, 101, 100, 101, 104, 100, 102, 103, 105, 103, 102, 104, 105, 103, 102, 102, 104, 103, 106, 104, 107, 102, 103, 103, 102, 105, 107, 108, 105, 103, 102, 103, 104, 103, 106, 106, 107, 103, 102, 106, 105, 105, 104, 106, 106, 105, 105, 106, 105, 107, 110, 106, 106, 118, 109, 111, 111, 110, 110, 120, 126, 166, 160, 135, 113, 111, 112, 106, 109, 168, 161, 137, 112, 111, 109, 109, 107, 2459, 160, 138, 114, 110, 109, 108, 106, 164, 159, 138, 111, 109, 110, 110, 104, 1099, 158, 138, 109, 108, 107, 109, 106, 164, 158, 142, 110, 108, 108, 107, 106, 2401, 157, 146, 110, 111, 106, 105, 104, 215, 166, 164, 112, 109, 106, 106, 104, 113, 107, 109, 108, 108, 106, 103, 103, 111, 109, 110, 110, 108, 107, 107, 105, 114, 110, 110, 109, 110, 107, 109, 107, 113, 112, 109, 111, 109, 107, 109, 105, 114, 113, 113, 115, 110, 113, 111, 109, 113, 116, 112, 113, 110, 109, 109, 108, 116, 115, 117, 114, 114, 112, 110, 114, 124, 122, 119, 119, 117, 118, 119, 123]
        # filtered_data = np.array([110, 110, 110, 105, 105, 107, 104, 106, 110, 110, 110, 107, 106, 108, 108, 106, 110, 110, 110, 107, 108, 107, 108, 108, 110, 110, 110, 108, 108, 108, 109, 111, 110, 110, 110, 112, 109, 111, 110, 112, 110, 110, 110, 112, 110, 110, 112, 109, 110, 110, 110, 113, 111, 112, 113, 111, 110, 110, 110, 113, 112, 110, 112, 113, 100, 99, 101, 101, 101, 100, 100, 102, 101, 101, 102, 103, 105, 103, 104, 103, 102, 102, 102, 103, 102, 104, 105, 105, 102, 103, 102, 102, 105, 105, 107, 104, 102, 102, 104, 104, 103, 102, 105, 105, 102, 103, 104, 105, 104, 102, 105, 106, 103, 106, 104, 105, 105, 105, 108, 107, 117, 110, 109, 110, 110, 110, 121, 126, 110, 110, 134, 112, 110, 110, 106, 108, 110, 110, 110, 113, 112, 110, 108, 107, 110, 110, 110, 114, 110, 108, 109, 105, 110, 110, 123, 112, 109, 109, 109, 106, 110, 110, 110, 112, 109, 108, 109, 106, 110, 110, 110, 112, 107, 107, 105, 105, 110, 110, 110, 109, 108, 107, 106, 106, 110, 110, 110, 111, 107, 105, 105, 104, 110, 107, 108, 107, 106, 105, 104, 103, 110, 108, 109, 108, 108, 105, 105, 106, 113, 111, 110, 110, 109, 107, 108, 105, 113, 111, 111, 109, 108, 107, 106, 107, 113, 113, 113, 112, 110, 110, 108, 107, 114, 113, 110, 110, 111, 110, 109, 108, 116, 115, 112, 114, 112, 112, 110, 111, 124, 123, 118, 118, 119, 117, 118, 121])
        # #Second sample no top close to the table rectagular object target
        # data = [211, 214, 121, 96, 97, 96, 96, 95, 220, 218, 117, 98, 96, 97, 97, 97, 228, 216, 116, 97, 96, 100, 99, 100, 230, 219, 120, 98, 97, 99, 102, 102, 235, 221, 119, 103, 100, 102, 103, 105, 215, 203, 116, 104, 103, 103, 103, 104, 168, 164, 119, 105, 103, 105, 107, 106, 130, 131, 118, 104, 105, 104, 106, 105, 94, 93, 95, 94, 94, 97, 97, 97, 94, 93, 94, 97, 98, 100, 98, 98, 95, 97, 96, 94, 95, 98, 98, 102, 94, 96, 96, 96, 98, 98, 100, 101, 96, 94, 98, 97, 98, 98, 103, 102, 95, 95, 97, 99, 97, 97, 101, 102, 95, 97, 96, 99, 100, 99, 102, 104, 95, 96, 96, 98, 98, 100, 104, 106, 116, 118, 113, 104, 102, 101, 100, 99, 1891, 144, 126, 105, 102, 103, 103, 98, 152, 152, 130, 106, 102, 99, 97, 95, 1055, 146, 126, 103, 103, 101, 104, 97, 149, 146, 124, 102, 100, 99, 100, 95, 2051, 147, 130, 100, 100, 98, 92, 95, 149, 145, 130, 102, 98, 97, 96, 94, 3459, 145, 3479, 102, 97, 95, 96, 94, 67, 78, 94, 98, 98, 98, 93, 95, 67, 80, 98, 101, 101, 98, 96, 98, 67, 80, 98, 101, 103, 100, 99, 99, 64, 82, 98, 103, 102, 100, 100, 99, 65, 86, 96, 104, 105, 105, 99, 102, 60, 81, 99, 102, 103, 101, 101, 98, 63, 81, 100, 108, 103, 105, 101, 100, 60, 78, 97, 101, 105, 104, 105, 104]
        # filtered_data = [102, 102, 119, 95, 96, 97, 94, 95, 102, 102, 116, 96, 96, 96, 96, 97, 102, 102, 116, 98, 98, 97, 99, 100, 102, 102, 119, 99, 97, 99, 100, 101, 102, 102, 120, 102, 102, 103, 101, 103, 102, 178, 118, 100, 101, 102, 102, 102, 149, 146, 110, 106, 104, 105, 105, 104, 125, 116, 117, 104, 103, 102, 104, 102, 92, 92, 94, 93, 95, 96, 96, 96, 93, 94, 96, 96, 97, 97, 98, 98, 94, 95, 95, 95, 96, 100, 98, 99, 94, 95, 95, 95, 97, 99, 99, 99, 94, 95, 96, 97, 97, 97, 100, 100, 94, 94, 96, 99, 96, 97, 99, 100, 95, 97, 98, 98, 99, 100, 102, 104, 95, 95, 94, 99, 96, 98, 104, 107, 115, 117, 111, 102, 101, 103, 99, 99, 129, 133, 117, 103, 102, 101, 100, 98, 139, 138, 122, 105, 102, 97, 100, 96, 138, 135, 118, 102, 100, 100, 99, 98, 138, 136, 118, 102, 100, 98, 98, 95, 136, 134, 121, 100, 98, 96, 94, 94, 136, 133, 122, 101, 98, 97, 96, 95, 112, 133, 129, 101, 95, 94, 94, 94, 74, 81, 96, 97, 98, 97, 93, 94, 74, 81, 97, 99, 100, 98, 95, 96, 73, 82, 98, 101, 100, 98, 97, 98, 72, 81, 97, 103, 101, 100, 97, 100, 73, 83, 99, 103, 107, 103, 98, 99, 71, 80, 98, 102, 101, 101, 101, 97, 73, 82, 98, 104, 103, 104, 102, 101, 71, 84, 99, 104, 104, 103, 104, 102]
        # # Third sample with top and higher off the table rectagular object target
        # data = [253, 249, 197, 113, 114, 114, 113, 114, 250, 251, 191, 116, 113, 115, 115, 114, 255, 250, 178, 117, 115, 118, 118, 119, 259, 251, 173, 118, 116, 121, 120, 121, 260, 255, 183, 122, 121, 119, 122, 121, 262, 257, 205, 125, 120, 120, 122, 123, 255, 257, 207, 125, 121, 122, 122, 124, 220, 223, 196, 124, 120, 124, 120, 122, 109, 109, 110, 110, 113, 111, 112, 113, 108, 111, 112, 113, 115, 114, 115, 115, 112, 112, 112, 113, 112, 115, 115, 119, 112, 114, 113, 113, 113, 117, 121, 116, 112, 114, 116, 115, 115, 116, 118, 119, 113, 113, 116, 116, 117, 115, 115, 121, 114, 116, 114, 117, 116, 120, 122, 123, 157, 158, 159, 164, 166, 189, 224, 223, 178, 173, 155, 123, 121, 120, 116, 120, 179, 174, 157, 122, 118, 120, 117, 115, 178, 173, 153, 124, 119, 119, 117, 114, 181, 171, 155, 120, 116, 118, 116, 115, 180, 170, 152, 118, 115, 117, 115, 114, 178, 169, 160, 120, 114, 113, 113, 113, 182, 165, 162, 119, 113, 113, 113, 112, 226, 174, 173, 120, 114, 111, 113, 111, 124, 118, 118, 116, 119, 113, 112, 112, 123, 121, 121, 118, 118, 116, 113, 111, 122, 122, 120, 121, 118, 116, 115, 115, 124, 124, 122, 119, 116, 118, 117, 114, 124, 122, 123, 122, 121, 118, 118, 117, 125, 124, 123, 122, 123, 117, 118, 116, 127, 128, 122, 124, 122, 120, 120, 119, 135, 146, 147, 143, 143, 140, 142, 141]
        # filtered_data = np.array([279, 279, 284, 281, 280, 278, 280, 286, 281, 281, 281, 283, 282, 279, 277, 275, 280, 276, 281, 276, 280, 277, 275, 275, 281, 282, 280, 276, 278, 275, 279, 277, 284, 284, 280, 279, 278, 281, 280, 277, 282, 283, 282, 281, 281, 277, 275, 275, 280, 281, 281, 279, 275, 278, 274, 272, 275, 278, 275, 276, 276, 270, 272, 266, 273, 272, 275, 269, 267, 268, 268, 273, 273, 272, 276, 273, 272, 271, 270, 273, 271, 276, 276, 271, 272, 273, 273, 269, 276, 280, 277, 273, 274, 272, 278, 276, 279, 276, 275, 274, 275, 275, 280, 274, 281, 282, 284, 280, 278, 280, 278, 281, 280, 283, 280, 282, 284, 278, 279, 279, 284, 282, 279, 281, 277, 281, 281, 282, 271, 272, 272, 268, 269, 270, 271, 273, 275, 277, 276, 277, 272, 272, 272, 276, 281, 281, 277, 278, 277, 278, 275, 272, 277, 280, 285, 274, 275, 274, 272, 273, 277, 277, 277, 276, 277, 273, 272, 273, 281, 278, 276, 272, 276, 271, 274, 269, 278, 272, 274, 274, 277, 273, 276, 272, 280, 273, 273, 275, 268, 269, 269, 276, 275, 275, 266, 268, 269, 270, 266, 270, 275, 274, 267, 271, 270, 269, 272, 271, 275, 267, 267, 269, 272, 266, 273, 273, 275, 268, 271, 271, 274, 274, 275, 273, 275, 273, 268, 268, 269, 274, 275, 273, 275, 273, 270, 273, 273, 271, 274, 273, 275, 275, 269, 271, 272, 272, 276, 276, 275, 275, 271, 273, 276, 269, 277, 280]
        # )
        # # Forth sample with top and higher off the table and circular object
        # data = [100, 2263, 224, 227, 130, 113, 103, 105, 98, 125, 217, 223, 135, 115, 103, 99, 100, 1588, 218, 222, 139, 117, 106, 101, 100, 137, 217, 220, 140, 116, 104, 102, 100, 1045, 214, 222, 137, 120, 109, 106, 100, 125, 222, 228, 141, 119, 107, 103, 102, 121, 218, 230, 142, 121, 110, 103, 105, 114, 195, 210, 137, 115, 108, 106, 233, 220, 140, 109, 110, 109, 108, 114, 200, 110, 107, 97, 102, 101, 102, 99, 138, 105, 103, 97, 96, 101, 97, 100, 145, 104, 104, 97, 98, 98, 105, 101, 188, 113, 112, 108, 105, 107, 108, 108, 240, 183, 142, 112, 118, 120, 123, 120, 241, 223, 189, 139, 153, 442, 158, 157, 227, 170, 164, 155, 160, 156, 149, 151, 207, 222, 225, 166, 118, 108, 101, 102, 218, 252, 257, 197, 120, 111, 101, 97, 224, 260, 260, 214, 120, 111, 103, 99, 225, 256, 259, 220, 119, 110, 102, 99, 226, 259, 256, 220, 124, 110, 104, 97, 223, 254, 253, 228, 122, 109, 100, 95, 214, 251, 254, 228, 124, 113, 105, 94, 210, 249, 252, 242, 139, 111, 98, 95, 140, 148, 139, 134, 140, 150, 153, 140, 118, 111, 111, 113, 110, 112, 108, 106, 109, 110, 108, 106, 104, 104, 101, 101, 105, 107, 105, 102, 99, 98, 96, 100, 109, 108, 107, 106, 107, 100, 103, 101, 117, 115, 116, 113, 112, 115, 110, 108, 143, 136, 135, 138, 139, 134, 136, 142, 156, 201, 242, 249, 248, 248, 245, 243]
        # filtered_data = np.array([98, 119, 121, 121, 129, 111, 103, 99, 96, 126, 121, 121, 135, 114, 103, 98, 99, 131, 121, 121, 138, 115, 104, 100, 97, 132, 121, 121, 140, 115, 106, 101, 99, 133, 121, 121, 138, 118, 109, 103, 99, 126, 121, 121, 139, 118, 109, 103, 102, 119, 121, 121, 141, 117, 110, 104, 105, 113, 121, 121, 136, 116, 108, 104, 121, 121, 140, 106, 110, 109, 109, 114, 121, 110, 107, 100, 103, 102, 100, 100, 136, 103, 104, 95, 97, 100, 99, 99, 143, 104, 105, 98, 97, 99, 102, 101, 121, 111, 111, 103, 105, 104, 108, 106, 121, 121, 141, 113, 115, 118, 120, 120, 121, 121, 160, 134, 151, 161, 160, 157, 121, 159, 155, 158, 157, 159, 147, 149, 121, 121, 121, 133, 115, 109, 101, 102, 121, 121, 121, 121, 118, 110, 101, 97, 121, 121, 121, 121, 119, 113, 101, 100, 121, 121, 121, 121, 120, 110, 102, 99, 121, 121, 121, 121, 121, 110, 101, 96, 121, 121, 121, 121, 123, 108, 101, 94, 121, 121, 121, 121, 125, 110, 103, 96, 121, 121, 121, 121, 137, 109, 99, 95, 138, 149, 136, 135, 139, 148, 150, 141, 119, 111, 111, 112, 113, 110, 107, 106, 107, 107, 107, 106, 104, 101, 102, 100, 106, 105, 106, 102, 97, 98, 99, 99, 108, 108, 108, 106, 105, 102, 103, 102, 115, 113, 114, 115, 113, 113, 111, 108, 140, 134, 135, 139, 136, 134, 134, 141, 157, 121, 121, 121, 121, 121, 121, 121])

        self.filtered_data = np.array([86, 113, 99, 115, 109, 104, 98, 96, 86, 114, 99, 115, 110, 106, 101, 97, 85, 115, 99, 115, 111, 106, 101, 99, 84, 113, 99, 117, 111, 106, 102, 100, 84, 110, 99, 117, 111, 107, 103, 101, 81, 99, 99, 117, 111, 106, 102, 98, 81, 95, 99, 117, 111, 107, 103, 98, 81, 88, 99, 117, 108, 104, 101, 98, 89, 87, 88, 89, 89, 87, 88, 87, 88, 90, 89, 90, 90, 90, 88, 88, 90, 90, 89, 90, 91, 92, 92, 90, 93, 93, 91, 93, 93, 93, 94, 93, 95, 95, 97, 95, 95, 95, 97, 95, 99, 99, 100, 99, 99, 97, 98, 99, 103, 105, 105, 105, 105, 104, 105, 106, 108, 111, 112, 114, 112, 113, 115, 113, 99, 107, 97, 93, 92, 91, 90, 94, 99, 107, 100, 96, 94, 92, 90, 91, 99, 110, 100, 97, 94, 92, 91, 92, 99, 110, 101, 96, 92, 93, 93, 94, 99, 115, 103, 98, 94, 95, 94, 93, 99, 119, 104, 97, 96, 93, 92, 92, 99, 99, 105, 97, 94, 94, 95, 94, 99, 99, 104, 98, 96, 93, 91, 94, 106, 109, 108, 107, 107, 105, 107, 108, 101, 100, 103, 101, 102, 103, 99, 100, 99, 98, 98, 99, 98, 97, 95, 95, 97, 95, 96, 96, 95, 94, 95, 95, 94, 96, 94, 96, 96, 95, 94, 93, 93, 94, 92, 92, 93, 93, 93, 91, 96, 96, 95, 95, 95, 95, 93, 91, 98, 94, 95, 94, 93, 93, 92, 91])
        # filtered_data = np.array([297, 300, 296, 233, 154, 141, 141, 182, 309, 309, 304, 248, 155, 141, 138, 170, 313, 313, 309, 251, 157, 143, 140, 167, 314, 308, 305, 251, 159, 146, 140, 158, 316, 316, 308, 254, 161, 147, 144, 157, 317, 320, 311, 282, 175, 154, 152, 174, 317, 317, 320, 304, 226, 170, 167, 262, 322, 317, 318, 313, 306, 264, 278, 310, 221, 275, 283, 283, 286, 288, 289, 299, 209, 254, 259, 262, 252, 245, 257, 279, 159, 156, 158, 155, 154, 158, 159, 158, 139, 138, 139, 136, 137, 136, 140, 138, 138, 138, 136, 137, 136, 138, 138, 140, 147, 145, 151, 149, 150, 151, 154, 162, 196, 213, 243, 246, 239, 268, 277, 297, 214, 273, 295, 294, 293, 299, 303, 313, 327, 316, 312, 314, 296, 219, 196, 301, 312, 317, 312, 310, 244, 170, 158, 178, 306, 305, 304, 300, 220, 161, 142, 144, 306, 303, 305, 292, 218, 163, 142, 139, 310, 306, 306, 297, 226, 166, 140, 139, 306, 299, 305, 292, 244, 164, 141, 139, 306, 301, 302, 297, 249, 164, 141, 135, 297, 301, 297, 296, 237, 160, 140, 140, 304, 317, 312, 308, 304, 304, 295, 300, 305, 316, 317, 298, 245, 204, 190, 208, 301, 315, 299, 193, 166, 149, 146, 141, 310, 311, 282, 174, 158, 144, 140, 138, 299, 312, 285, 191, 166, 150, 147, 147, 301, 315, 304, 273, 248, 222, 223, 237, 295, 312, 310, 304, 302, 301, 292, 293, 299, 312, 313, 306, 301, 301, 303, 306])
        # filtered_data = np.array([84, 100, 101, 92, 87, 86, 79, 79, 85, 104, 102, 94, 89, 86, 82, 80, 85, 103, 100, 93, 89, 86, 82, 80, 85, 104, 102, 94, 90, 86, 83, 82, 85, 103, 100, 95, 90, 88, 84, 80, 85, 109, 103, 94, 91, 87, 83, 82, 85, 117, 103, 96, 90, 88, 85, 82, 84, 84, 103, 96, 90, 85, 83, 81, 76, 76, 77, 76, 75, 76, 76, 74, 77, 78, 76, 76, 77, 76, 74, 74, 75, 76, 73, 76, 75, 77, 75, 75, 75, 77, 74, 76, 76, 77, 77, 74, 77, 76, 79, 74, 76, 75, 78, 77, 78, 78, 79, 81, 77, 75, 78, 78, 80, 83, 82, 82, 82, 82, 83, 83, 84, 87, 85, 85, 83, 84, 87, 86, 84, 97, 90, 85, 81, 77, 74, 75, 84, 101, 94, 86, 83, 80, 76, 73, 85, 84, 93, 90, 84, 80, 78, 75, 84, 102, 94, 88, 83, 79, 82, 76, 85, 84, 95, 90, 84, 82, 81, 79, 85, 110, 95, 89, 84, 80, 78, 77, 85, 84, 98, 88, 85, 83, 80, 77, 84, 84, 98, 90, 86, 81, 80, 78, 84, 82, 81, 82, 81, 79, 80, 80, 80, 80, 80, 79, 81, 79, 79, 79, 80, 80, 78, 79, 77, 76, 76, 76, 80, 78, 78, 79, 78, 76, 77, 76, 79, 80, 78, 79, 81, 77, 76, 76, 78, 79, 77, 78, 78, 76, 75, 75, 81, 82, 79, 80, 82, 80, 79, 80, 86, 82, 82, 81, 83, 82, 81, 80])

        # This is from the code Shakti and Paolo wrote for the TOF sensor by the end of Spring 2024
        # The code is in the curobo directory of the storm workspace in winthrop

    def get_tof_angles(self, sensor_resolution, fov_h, fov_v, distance):
        h = np.arange(0, fov_h, fov_h/sensor_resolution[0]) + fov_h / 16 - fov_h / 2
        v = np.arange(0, fov_v, fov_v/sensor_resolution[1]) + fov_v / 16 - fov_v / 2
        H, V = np.meshgrid(h, v)
        points = np.stack((H, V), axis = -1)

        return self.pixel_to_3d_pose(points, distance)
    def pixel_to_3d_pose(self, pixel_angles, distance):
        x = distance * np.tan(np.radians(pixel_angles[:,:,0]))
        y = distance 
        z = distance * np.tan(np.radians(pixel_angles[:,:,1]))
        return np.stack((x, y, z), axis = -1)

    def test(self, points):
        fig = plt.figure()
        ax = fig.add_subplot(projection='3d')
        print(points.shape)
        ax.scatter(points[:8,:8,0], points[:8,:8,1], points[:8,:8,2], color="red")
        # ax.scatter(points[4:8,4:8,0], points[4:8,4:8,1], points[4:8,4:8,2], color="green")
        ax.scatter(points[8:16,:,0], points[8:16,:,1], points[8:16,:,2])
        ax.scatter(points[16:24,:,0], points[16:24,:,1], points[16:24,:,2], color="purple")
        # ax.scatter(points[24:32,:,0], points[24:32,:,1], points[24:32,:,2], color="brown")
        # ax.scatter(points[8:,:,0], points[8:,:,1], points[8:,:,2])
        ax.set_xlim(-200, 200)
        ax.set_ylim(-0, 500)
        ax.set_zlim(-200, 200)
        plt.xlabel('X-axis label')
        plt.ylabel('Y-axis label')
        # plt.zlabel('Z-axis label')
        plt.show()

    def quaternion_to_rotation_matrix(self, q):
        """
        Convert a quaternion into a 3x3 rotation matrix.
        
        :param q: List or array of quaternion [w, x, y, z]
        :return: 3x3 rotation matrix
        """
        w, x, y, z = q
        
        # Compute rotation matrix
        R = np.array([[1 - 2*(y**2 + z**2), 2*(x*y - z*w), 2*(x*z + y*w)],
                    [2*(x*y + z*w), 1 - 2*(x**2 + z**2), 2*(y*z - x*w)],
                    [2*(x*z - y*w), 2*(y*z + x*w), 1 - 2*(x**2 + y**2)]])
        
        return R

    def transform(self, points, R, T, R2):

        # Global point (after transformation)
        # return np.dot(R2, np.dot(R, points)) + T
        return np.dot(R, points) + T

if __name__ == "__main__":

    R = [quaternion_to_rotation_matrix(q) for q in Q]
    R2 = [quaternion_to_rotation_matrix(q) for q in Q2]
    sensor_resolution = [8, 8]
    fov_h = 65
    fov_v = 65

    transformed_points = np.empty((8, 8, 3))
    for i in range(4):
        distance = filtered_data[int(0 + i*64) : int(64 + i*64)].reshape((8,8))
        
        # distance = np.ones((8,8))
        points = get_tof_angles(sensor_resolution, fov_h, fov_v, distance)
        points = points.reshape((64, 3))
        print(points.shape)
        # import pdb; pdb.set_trace()
        for j in range(64):
            points[j, :] = transform(points[j, :], R[i], T[i], R2[i])
        points = points.reshape((8, 8, 3))

        transformed_points = np.concatenate((transformed_points, points))
    
    test(transformed_points[8:,:,:])